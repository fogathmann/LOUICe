<?xml version="1.0" encoding="utf-8"?>
<s:Form xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:mx="library://ns.adobe.com/flex/mx"
        xmlns:rack="com.cenix.louice.shared.ui.components.rack.*"
        xmlns:components="com.cenix.louice.shared.ui.components.*"
        xmlns:components1="org.everest.flex.ui.components.*"
        xmlns:components2="com.cenix.louice.modules.isorequestmember.ui.components.*">
    <s:layout>
        <s:VerticalLayout/>
    </s:layout>
    <s:states>
        <s:State name="xl20"/>
        <s:State name="pipetting"/>
        <s:State name="completed"/>
        <s:State name="canceled"/>
        <s:State name="reopened"/>
        <s:State name="unknown"/>
    </s:states>
    
    <fx:Script>
        <![CDATA[
            import com.cenix.louice.modules.isorequestmember.ui.presenters.IsoRequestMemberPresentationModel;
            import com.cenix.louice.modules.isorequestmember.ui.views.IsosView;
            import com.cenix.louice.shared.model.vos.BarcodeType;
            import com.cenix.louice.shared.model.vos.ExperimentMetaDataTypes;
            import com.cenix.louice.shared.model.vos.LabIsoMember;
            
            import org.everest.flex.ui.components.ConfirmationView;
            
            [Bindable]
            public var isoRequest:IsoRequestMemberPresentationModel;
            
            [Bindable]
            public var isosView:IsosView;
            
            [Bindable]
            private var _iso:LabIsoMember;
            
            public function set iso(isoMember:LabIsoMember):void
            {
                if (isoMember != null)
                {
                    // First, check if we need to create stock racks.
                    if (isoMember.number_stock_racks > 0 && 
                        ((isoMember.stock_racks == null) 
                            || (isoMember.stock_racks.length < 1))) {
                        setCurrentState("xl20");                                                                
                    } else {
                        switch (isoMember.status) {
                            case 'done':
                                setCurrentState("completed");
                                break;
                            case 'canceled':
                                setCurrentState("canceled");
                                break;
                            case 'queued':
                            case 'in_progress':
                                setCurrentState("pipetting");
                                break;
                            case 'reopened':
                                setCurrentState("reopened");
                                break;
                            default:
                                setCurrentState("unknown");
                                break;
                        }
                    }
                    _iso = isoMember;
                    processingForm.data = _iso;
                    isosView.resetPreview();
                }
            }
            
            [Bindable]
            public function get iso():LabIsoMember
            {
                return this._iso;
            }
            
            protected function completeIso(event:MouseEvent):void
            {
                isoRequest.closeIso(_iso);
            }
            
            protected function cancelIso(event:MouseEvent):void
            {
                ConfirmationView.show(
                    'ISO cancel can not be undone. Are you sure to proceed?',
                    'Cancel ISO',
                    function():void{
                        isoRequest.cancelIso(_iso);
                    });
            }
            
            protected function reopenIso(event:MouseEvent):void
            {
                isoRequest.reopenIso(_iso);
            }
            
            protected function copy(withOptimization:Boolean):void
            {
                isoRequest.copyIso(_iso, withOptimization);
                
            }
            
        ]]>
    </fx:Script>
    
    <s:Spacer height="5"/>
    
    <!--CURRENTSTATUS -->
    <s:HGroup includeIn="completed" width="100%" paddingLeft="5" paddingTop="2"
              verticalAlign="middle">
        <s:Label width="140" fontWeight="bold" text="Status" textAlign="right"/>
        <s:Label color="#00CC33" text="ISO has been marked as completed."/>
    </s:HGroup>
    <s:HGroup includeIn="canceled" width="100%" paddingLeft="5" paddingTop="2"
              verticalAlign="middle">
        <s:Label width="140" fontWeight="bold" text="Status" textAlign="right"/>
        <s:Label color="#FF0000" text="ISO has been marked as canceled."/>
    </s:HGroup>
    
    <!-- ISO PROCESSING -->
    <components2:IsoProcessingForm id="processingForm" width="100%" height="100%"
                                   data="{_iso}" isoRequest="{isoRequest}"
                                   isosView="{isosView}"
                                   currentState="{this.currentState}"/>
    
    <!-- ALIQUOT PLATES -->
    <s:HGroup visible="{isoRequest.experiment_metadata_type.id.toUpperCase() != ExperimentMetaDataTypes.MANUAL}"
              width="100%" contentBackgroundColor="#EBF4FF"
              paddingLeft="5" paddingTop="2" verticalAlign="top">
        <s:Label width="140" fontWeight="bold" paddingTop="5"
                 text="Aliquot plate(s)" textAlign="right"/>
        <s:HGroup visible="{_iso.aliquot_plates != null}" width="100%"
                  verticalAlign="middle">
            <s:DataGroup width="100%"
                         dataProvider="{_iso.aliquot_plates}">
                <s:layout>
                    <s:VerticalLayout paddingTop="5"
                                      useVirtualLayout="true"/>
                </s:layout>
                <s:itemRenderer>
                    <fx:Component>
                        <s:ItemRenderer width="100%"
                                        autoDrawBackground="false"
                                        currentState="{outerDocument.currentState}">
                            <fx:Script>
                                <![CDATA[
                                    import com.cenix.louice.shared.model.vos.BarcodeType;
                                ]]>
                            </fx:Script>
                            <s:states>
                                <s:State name="xl20"/>
                                <s:State name="pipetting"/>
                                <s:State name="completed"/>
                                <s:State name="canceled"/>
                                <s:State name="reopened"/>
                                <s:State name="unknown"/>
                            </s:states>
                            <s:VGroup width="100%">
                                <s:HGroup width="100%"
                                          verticalAlign="middle">
                                    <components:BarcodeButton label="{data.label}"
                                                              barcode="{data.barcode}"
                                                              type="{BarcodeType.UNIRACK}"/>
                                    <s:Label text="{data.status}"/>
                                    <s:Label color="{(data.specs.title.indexOf('deep') &gt; 0) ? 0xFF0000 : 0x000000}"
                                             text="- {data.specs.title}"/>
                                    <s:Spacer width="100%"/>
                                    <s:Button height="18"
                                              label="show &gt;"
                                              click="{outerDocument.isosView.quickLook(data.barcode)}"
                                              enabled="{outerDocument.isoRequest.platesToLoad &lt; 1}"/>
                                </s:HGroup>
                            </s:VGroup>
                        </s:ItemRenderer>
                    </fx:Component>
                </s:itemRenderer>
            </s:DataGroup>
        </s:HGroup>
    </s:HGroup>
    
    <!-- CHANGE STATUS -->
    <s:HGroup width="100%" contentBackgroundColor="#EBF4FF"
              paddingLeft="5" paddingTop="10" verticalAlign="middle">
        <s:Label width="140" fontWeight="bold" text="Change Status"
                 textAlign="right"/>
        <s:Button excludeFrom="completed,canceled" label="Complete"
                  click="completeIso(event)"
                  enabled="{(_iso.aliquot_plates.length &gt; 0) &amp;&amp; !_iso.aliquot_plates.getItemAt(0).isFuture() || !_iso.preparation_plates.getItemAt(0).isFuture()}"/>
        <s:Button includeIn="completed" label="Reopen"
                  click="reopenIso(event)"/>
        <s:Button excludeFrom="canceled" label="Cancel"
                  click="cancelIso(event)"/>
        <s:CalloutButton id="buttonCopy" label="Copy"
                         horizontalPosition="start"
                         verticalPosition="after">
            <s:calloutContent>
                <s:BorderContainer width="100%" height="100%"
                                   borderWeight="2" cornerRadius="3">
                    <s:borderStroke>
                        <s:LinearGradientStroke rotation="270" weight="5">
                            <s:GradientEntry color="#efefef"/>
                            <s:GradientEntry color="#efefef"/>
                        </s:LinearGradientStroke>
                    </s:borderStroke>
                    <s:backgroundFill>
                        <s:LinearGradient rotation="90">
                            <s:GradientEntry color="#FFFFFF"/>
                            <s:GradientEntry color="#EFEFEF"/>
                        </s:LinearGradient>
                    </s:backgroundFill>
                    <s:VGroup gap="0">
                        <s:Button width="100%"
                                  label="Without Optimization"
                                  click="buttonCopy.closeDropDown();copy(false)"/>
                        <s:Button width="100%" label="With Optimization"
                                  click="buttonCopy.closeDropDown();copy(true)"/>
                    </s:VGroup>
                </s:BorderContainer>
            </s:calloutContent>
        </s:CalloutButton>
    </s:HGroup>    
</s:Form>
