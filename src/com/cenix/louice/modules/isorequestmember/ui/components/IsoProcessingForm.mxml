<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:validators="com.cenix.louice.shared.ui.components.validators.*"
          xmlns:mx="library://ns.adobe.com/flex/mx"
          xmlns:components="com.cenix.louice.shared.ui.components.*"
          xmlns:components1="org.everest.flex.ui.components.*"
          xmlns:validators1="org.everest.flex.ui.validators.*"
          width="400" height="300">
    <s:states>
        <s:State name="xl20"/>
        <s:State name="pipetting"/>
        <s:State name="completed"/>
        <s:State name="canceled"/>
        <s:State name="reopened"/>
    </s:states>
    <fx:Script>
        <![CDATA[
            import com.cenix.louice.modules.isorequestmember.ui.presenters.IsoRequestMemberPresentationModel;
            import com.cenix.louice.modules.isorequestmember.ui.views.IsosView;
            import com.cenix.louice.shared.model.vos.BarcodePrintJobMember;
            import com.cenix.louice.shared.model.vos.BarcodeType;
            import com.cenix.louice.shared.model.vos.IsoJobMember;
            import com.cenix.louice.shared.model.vos.IsoMember;
            import com.cenix.louice.shared.model.vos.PlateMember;
            import com.cenix.louice.shared.model.vos.RackShapeMember;
            import com.cenix.louice.shared.ui.components.FileDownloadView;
            import com.cenix.louice.shared.ui.view.BarcodePrintPreView;
            
            import mx.events.CloseEvent;
            
            import org.everest.flex.ui.components.ConfirmationView;

            [Bindable]
            public var data:*;

            [Bindable]
            public var isoRequest:IsoRequestMemberPresentationModel;
            
            [Bindable]
            public var isosView:IsosView;

            private function downloadXL20Worklist(event:MouseEvent):void
            {
                // Reset the ISO racks.
                isoRequest.racks = new Dictionary()
                xl20Validator.validateForm();
                if(xl20Validator.formIsValid){
                    // Create download URL.
                    var url:String = 
                        isoRequest.getXl20WorklistUrl(data,
                            inputBarcode1XL20.text, inputBarcode2XL20.text,
                            inputBarcode3XL20.text, inputBarcode4XL20.text,
                            inputExcludedRacks.text, inputRequiredTubes.text);
//                    url += "&enforce_multiple_racks=" + checkboxMultipleRacks.selected;
                    var downloadView:FileDownloadView = 
                        FileDownloadView.show(url, get_filename(data) + "_xl20.zip")
                    downloadView.addEventListener(CloseEvent.CLOSE, isoRequest.resetPage);
                }	
            }
            
            protected function updateStockRacks(event:MouseEvent):void
            {
                isoRequest.updateStockRacks(data, inputBarcode1XL20.text,
                    inputBarcode2XL20.text, inputBarcode3XL20.text, 
                    inputBarcode4XL20.text)
            }
            
            protected function onXl20OutputLoadComplete(e:Event):void
            {
                // Reset the ISO racks.
                isoRequest.racks = new Dictionary();
                isoRequest.processXl20OutputData(e.target.data);
                isosView.resetPreview();
            }
            
            private function get numberPreparationPlateWells():int
            {
                var shape:RackShapeMember = data.preparation_plates[0].plate_specs.shape;
                return shape.number_columns * shape.number_rows;
            }
            
            protected function printBarcodes(event:Event):void
            {
                var job:BarcodePrintJobMember = new BarcodePrintJobMember();
                for each (var ipp:PlateMember in data.preparation_plates)
                {
                    job.addBarcodeLabelPair(ipp.barcode, ipp.label);                  
                }
                
                if (data is IsoMember) {
                    for each (var iap:PlateMember in data.aliquot_plates)
                    {
                        job.addBarcodeLabelPair(iap.barcode, iap.label);
                    }
                }
                job.type = BarcodeType.UNIRACK;
                BarcodePrintPreView.show(this.parent.parent.parent, job);
            }
            
            protected function downloadPipettingWorklist(event:MouseEvent):void
            {
                var url:String = isoRequest.getPipettingWorklistUrl(data);
                FileDownloadView.show(url,
                    get_filename(data) + "_pipetting_worklists.zip");
            }
            
            protected function executePipettingWorklist(event:MouseEvent=null):void
            {
                ConfirmationView.show(
                    'Worklist download will be disabled.\n\nAre you sure to proceed?',
                    'Update Database',
                    function():void{
                        // Reset the ISO racks.
                        isoRequest.racks = new Dictionary();
                        isoRequest.executePipettingWorklist(data);
                    });
            }
            
            private function get_filename(data:*):String
            {
                return data.label;
            }
            
        ]]>
    </fx:Script>
    
    <fx:Declarations>
        <fx:Array id="xl20Validators">
            <validators:RackBarcodeValidator property="text" required="true"
                                             source="{inputBarcode1XL20}"/>
            <validators:RackBarcodeValidator property="text"
                                             required="{data.number_stock_racks &gt; 1}"
                                             source="{inputBarcode2XL20}"/>
            <validators:RackBarcodeValidator property="text"
                                             required="{data.number_stock_racks &gt; 2}"
                                             source="{inputBarcode3XL20}"/>
            <validators:RackBarcodeValidator property="text"
                                             required="{data.number_stock_racks &gt; 3}"
                                             source="{inputBarcode4XL20}"/>
            <validators:RackBarcodeValidator property="text" required="false"
                                             source="{inputExcludedRacks}"/>
            <validators:TubeBarcodeValidator property="text" required="false"
                                             source="{inputRequiredTubes}"/>
        </fx:Array>
        <validators1:FormValidator id="xl20Validator"
                                   validators="{xl20Validators}"/>
    </fx:Declarations>
    
    <!-- XL20 -->    
    <s:HGroup includeIn="xl20" width="100%" contentBackgroundColor="#EBF4FF"
              paddingLeft="5" paddingTop="2" verticalAlign="middle">
        <s:Label width="140" fontWeight="bold" text="XL20 Tube Handler"
                 textAlign="right"/>
        <s:TextInput id="inputBarcode1XL20" width="80"
                     change="{xl20Validator.validateForm(event)}"
                     enter="{inputBarcode2XL20.setFocus()}" maxChars="8"
                     prompt="{data.number_stock_racks == 1 ? 'Barcode' : 'Barcode 1'}"
                     restrict="0-9"/>
        <s:TextInput id="inputBarcode2XL20"
                     visible="{data.number_stock_racks &gt; 1}" width="80"
                     change="{xl20Validator.validateForm(event)}"
                     enter="{inputBarcode3XL20.setFocus()}" maxChars="8"
                     prompt="Barcode 2" restrict="0-9"/>
        <s:Spacer width="10"/>
        <components1:SmartTextArea id="inputExcludedRacks" width="100%"
                                   prompt="Excluded racks" restrict="0-9,"/>
    </s:HGroup>
    <s:HGroup includeIn="xl20" width="100%" contentBackgroundColor="#EBF4FF"
              paddingLeft="5" paddingTop="2" verticalAlign="top">
        <s:Spacer width="140"/>
        <s:TextInput id="inputBarcode3XL20"
                     visible="{data.number_stock_racks &gt; 2}" width="80"
                     change="{xl20Validator.validateForm(event)}"
                     enter="{inputBarcode4XL20.setFocus()}" maxChars="8"
                     prompt="Barcode 3" restrict="0-9"/>
        <s:TextInput id="inputBarcode4XL20"
                     visible="{data.number_stock_racks &gt; 3}" width="80"
                     change="{xl20Validator.validateForm(event)}" maxChars="8"
                     prompt="Barcode 4" restrict="0-9"/>
        <s:Spacer width="10"/>
        <components1:SmartTextArea id="inputRequiredTubes" width="100%"
                                   height="50" prompt="Requested tubes"
                                   restrict="0-9," verticalAlign="top"/>
    </s:HGroup>
    <s:HGroup includeIn="xl20" width="100%" contentBackgroundColor="#EBF4FF"
              paddingBottom="0" paddingLeft="5" paddingTop="2"
              verticalAlign="middle">
        <s:Spacer width="40"/>
        <s:RadioButton id="existingRadioBtn" width="100" label="Use existing"
                       groupName="group1"/>
        <s:Button width="150" label="Update database"
                  click="updateStockRacks(event)"
                  enabled="{xl20Validator.formIsValid &amp;&amp; existingRadioBtn.selected}"/>
    </s:HGroup>
    <s:HGroup includeIn="xl20" width="100%" contentBackgroundColor="#EBF4FF"
              paddingBottom="10" paddingLeft="5" paddingTop="0"
              verticalAlign="middle">
        <s:Spacer width="40"/>
        <s:RadioButton id="newRadioBtn" width="100" label="Assemble new"
                       groupName="group1" selected="true"/>
        <s:Button width="150" label="Download worklist"
                  click="downloadXL20Worklist(event)"
                  enabled="{xl20Validator.formIsValid &amp;&amp; newRadioBtn.selected}"
                  icon="@Embed(source='/assets/icons/download.png')"/>
        <s:Spacer width="25"/>
    </s:HGroup>
    <s:Line includeIn="xl20" width="100%">
        <s:stroke>
            <s:SolidColorStroke color="#EBF4FF" weight="2"/>
        </s:stroke>
    </s:Line>

    <!-- STOCK RACKS -->
    <s:HGroup width="100%" height="100%" gap="18">
        <s:VGroup>
            <s:HGroup width="100%" contentBackgroundColor="#EBF4FF"
                      paddingBottom="10" paddingLeft="5" paddingTop="10"
                      verticalAlign="middle">
                <s:Label width="140" fontWeight="bold" text="ISO Stock Racks"
                         textAlign="right"/>
                <s:DataGroup width="100%" dataProvider="{data.stock_racks}">
                    <s:layout>
                        <s:VerticalLayout paddingTop="5" useVirtualLayout="true"/>
                    </s:layout>
                    <s:itemRenderer>
                        <fx:Component>
                            <s:ItemRenderer width="100%"
                                            autoDrawBackground="false"
                                            currentState="{outerDocument.currentState}">
                                <fx:Script>
                                    <![CDATA[
                                        import com.cenix.louice.shared.model.vos.BarcodeType;
                                        import com.cenix.louice.shared.model.vos.IsoSectorStockRackMember;
                                    ]]>
                                </fx:Script>
                                <s:states>
                                    <s:State name="xl20"/>
                                    <s:State name="pipetting"/>
                                    <s:State name="completed"/>
                                    <s:State name="canceled"/>
                                    <s:State name="reopened"/>
                                </s:states>
                                <s:HGroup width="100%" verticalAlign="middle">
                                    <s:Label text="{data is IsoSectorStockRackMember ? 'Sector' +  data.index + 1 + ':' : ''}"/>
                                    <components:BarcodeButton label="{data.rack.label}"
                                                              barcode="{data.rack.barcode}"
                                                              type="{BarcodeType.UNIRACK}"/>
                                    <s:Spacer width="100%"/>
                                    <s:Button excludeFrom="reopened,canceled,completed"
                                              height="18" label="show &gt;"
                                              click="{outerDocument.isosView.quickLook(data.rack.barcode, [8,12])}"
                                              enabled="{outerDocument.isoRequest.platesToLoad &lt; 1}"/>
                                </s:HGroup>
                            </s:ItemRenderer>
                        </fx:Component>
                    </s:itemRenderer>
                </s:DataGroup>
            </s:HGroup>
            <s:HGroup>
                <s:Spacer width="140"/>
                <components:Xl20UploadButton id="xl20Button" width="175"
                                             click="{xl20Button.addEventListener(Event.COMPLETE, onXl20OutputLoadComplete)}"
                                             enabled="false"
                                             enabled.pipetting="true"
                                             enabled.xl20="true"/>                
                <s:Button excludeFrom="reopened,canceled,completed"
                          label="Reset Stock Racks"
                          click="{currentState = 'xl20'}" enabled="false"
                          enabled.pipetting="true"
                          enabled.xl20="{isoRequest.platesToLoad &lt; 1}"/>                
            </s:HGroup>
            <s:Line width="100%">
                <s:stroke>
                    <s:SolidColorStroke color="#EBF4FF" weight="2"/>
                </s:stroke>
            </s:Line>
        </s:VGroup>
    </s:HGroup>

    <!-- PREPARATION PLATES -->
    <s:HGroup width="100%" contentBackgroundColor="#EBF4FF" paddingLeft="5"
              paddingTop="10" verticalAlign="middle">
        <s:Label width="140" fontWeight="bold" text="Preparation plates"
                 textAlign="right"/>
        <s:DataGroup width="100%" dataProvider="{data.preparation_plates}">
            <s:layout>
                <s:VerticalLayout paddingTop="5" useVirtualLayout="true"/>
            </s:layout>
            <s:itemRenderer>
                <fx:Component>
                    <s:ItemRenderer width="100%" autoDrawBackground="false"
                                    currentState="{outerDocument.currentState}">
                        <fx:Script>
                            <![CDATA[
                                import com.cenix.louice.shared.model.vos.BarcodeType;
                            ]]>
                        </fx:Script>
                        <s:states>
                            <s:State name="xl20"/>
                            <s:State name="pipetting"/>
                            <s:State name="completed"/>
                            <s:State name="canceled"/>
                            <s:State name="reopened"/>
                            <s:State name="unknown"/>
                        </s:states>
                        <s:HGroup width="100%" verticalAlign="middle">
                            <components:BarcodeButton label="{data.label}"
                                                      barcode="{data.barcode}"
                                                      type="{BarcodeType.UNIRACK}"/>
                            <s:Label id="bla" text="{data.status}"/>
                            <s:Label color="{(data.specs.title.indexOf('deep') &gt; 0) ? 0xFF0000 : 0x000000}"
                                     text="- {data.specs.title}"/>
                            <s:Spacer width="100%"/>
                            <s:Button height="18" label="show &gt;"
                                      click="{outerDocument.isosView.quickLook(data.barcode)}"
                                      enabled="{outerDocument.isoRequest.platesToLoad &lt; 1}"/>
                        </s:HGroup>
                    </s:ItemRenderer>
                </fx:Component>
            </s:itemRenderer>
        </s:DataGroup>
    </s:HGroup>    
    <s:HGroup excludeFrom="xl20,completed,canceled"
              visible="{data.preparation_plates != null}" width="100%"
              contentBackgroundColor="#EBF4FF" paddingBottom="10"
              paddingLeft="5" paddingTop="2" verticalAlign="middle">
        <s:Spacer width="140"/>
        <s:Button width="150" label="print barcodes" click="printBarcodes(event)"
                  icon="@Embed(source='/assets/icons/barcode.png')"/>
    </s:HGroup>
    <s:Line excludeFrom="xl20,completed,canceled" width="100%">
        <s:stroke>
            <s:SolidColorStroke color="#EBF4FF" weight="2"/>
        </s:stroke>
    </s:Line>
    
    <!-- PIPETTING -->
    <s:HGroup excludeFrom="xl20,completed,canceled" width="100%"
              contentBackgroundColor="#EBF4FF" paddingBottom="10"
              paddingLeft="5" paddingTop="10" verticalAlign="middle">
        <s:Label width="140" fontWeight="bold" text="Pipetting" textAlign="right"/>
        <s:Button width="175" label="Download worklist"
                  click="downloadPipettingWorklist(event)" enabled="false"
                  icon="@Embed(source='/assets/icons/download.png')"
                  enabled.pipetting="true"/>
        <s:Button width="175" label="Update database"
                  click="executePipettingWorklist(event)" enabled="false"
                  enabled.pipetting="true"/>
    </s:HGroup>
    
    <s:Line excludeFrom="xl20,completed,canceled" width="100%">
        <s:stroke>
            <s:SolidColorStroke color="#EBF4FF" weight="2"/>
        </s:stroke>
    </s:Line>
</s:VGroup>
