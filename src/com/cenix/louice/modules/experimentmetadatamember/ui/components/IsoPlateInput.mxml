<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:mx="library://ns.adobe.com/flex/mx"
          xmlns:validators="com.cenix.louice.shared.ui.components.validators.*"
          xmlns:spark="com.flex.utils.spark.*"
          xmlns:components="com.cenix.louice.shared.ui.components.*"
          xmlns:maps1="org.everest.flex.maps.*"
          xmlns:components1="org.everest.flex.ui.components.*"
          xmlns:validators1="org.everest.flex.ui.validators.*"
          verticalAlign="middle">
    <fx:Script>
        <![CDATA[
            import org.everest.flex.events.SuggestionEvent;
            import com.cenix.louice.shared.model.vos.LabIsoRequestMember;
            import org.everest.flex.query.Criteria;
            import org.everest.flex.ui.presenters.FeedPresentationModel;
            import org.everest.flex.ui.presenters.SuggestionDropDownListPresentationModel;

            import mx.binding.utils.BindingUtils;
            import mx.collections.ArrayCollection;
            import mx.collections.IList;

            import org.as3commons.lang.StringUtils;

            import spark.events.IndexChangeEvent;

            [Bindable]
            public var isoPlates:ArrayCollection=new ArrayCollection();

            [Bindable]
            private var _model:FeedPresentationModel;


            public function set isoRequest(isoRequest:LabIsoRequestMember):void
            {
				var url:String = "/iso-requests/" + isoRequest.id + "/completed-iso-plates/"
				isoAliquotePlateInput.url = url
            }
            public function get model():FeedPresentationModel
            {
                return _model;
            }

            public function set model(value:FeedPresentationModel):void
            {
                _model=value;
                BindingUtils.bindProperty(this, "resultPlates", model, "members");
            }

            public function set resultPlates(value:IList):void
            {
                if (currentState != "pendingResponse")
                {
                    return;
                }

                setCurrentState("normal");

                if (value.length < 1)
                {
                    if (inputSourceBarcode.text.length > 0)
                    {
                        inputSourceBarcode.errorString="no plate found with this code";
                    }
                }
                else
                {
                    var dejavu:Dictionary = new Dictionary();
                    for each (var plate:* in isoPlates)
                    {
                        dejavu[plate.barcode]=true;
                    }

                    for each (var item:* in value)
                    {
                        if (!dejavu[item.barcode])
                        {
                            item.prefix=item.label;
                            this.isoPlates.addItem(item);
                            dejavu[item.barcode] = true;
                        }
                    }

                    inputSourceBarcode.text="";
                }
            }

            protected function searchPlates(url:String):void
            {
                var evt:SuggestionEvent;
                evt=new SuggestionEvent(SuggestionEvent.LOAD_DATA);
                evt.url=url;
                inputSourceBarcode.dispatchEvent(evt);
            }

            protected function btAddSourcePlate_clickHandler(event:MouseEvent):void
            {
                formValidator.validateForm();
                if (formValidator.formIsValid)
                {
                    var query:String = inputSourceBarcode.criteria.toString();
                    if (query.length > 8)
                    {
                        setCurrentState("pendingResponse");
                        searchPlates("/racks/?" + query);
                    }
                }
            }

            public function deleteSourceRack(event:MouseEvent):void{
                isoPlates.removeItemAt(sourceRackGrid.selectedIndex);
                isoPlates.refresh();
            }

            protected function isoAliquotePlateInput_changeHandler(event:IndexChangeEvent):void
            {
                var barcode:String = StringUtils.substringBefore(isoAliquotePlateInput.selectedItem.label, " ");
                if (inputSourceBarcode.text.indexOf(barcode) < 0)
                {
                    var txt:String = inputSourceBarcode.text;
                        txt += (inputSourceBarcode.text.length == 0) ? barcode : "," + barcode;
                    inputSourceBarcode.textValue = txt;
                }
            }

        ]]>
    </fx:Script>

    <fx:Declarations>

        <fx:Array id="validators">
            <validators:RackBarcodeValidator property="text" required="false"
                                             source="{inputSourceBarcode}"/>
        </fx:Array>
        <validators1:FormValidator id="formValidator" validators="{validators}"/>

        <maps1:SuggestionEventMap dispatcher="{isoAliquotePlateInput}"
                                  presenter="{SuggestionDropDownListPresentationModel}"
                                  view="{SuggestionDropDownListView}"/>

        <maps1:SuggestionEventMap dispatcher="{this}"
                                  presenter="{FeedPresentationModel}"
                                  view="{IsoPlateInput}"/>

    </fx:Declarations>

    <s:states>
        <s:State name="normal"/>
        <s:State name="pendingResponse"/>
    </s:states>

    <s:HGroup width="100%" verticalAlign="middle"
              enabled.pendingResponse="false">
        <components1:SuggestionDropDownListView id="isoAliquotePlateInput"
                                                width="200"
                                                change="isoAliquotePlateInput_changeHandler(event)"
                                                defaultChoice="false"/>
        <s:Label text="&gt;&gt;"/>
        <components1:SmartTextArea id="inputSourceBarcode" width="100%"
                                   criteria="{new Criteria()}" name="barcode"
                                   operator="equal-to"
                                   prompt="barcode single or csv list"
                                   restrict="0-9 ,"/>

        <s:Button id="btAddSourcePlate" label="add"
                  click="btAddSourcePlate_clickHandler(event)" fontWeight="bold"/>

        <s:BusyIndicator visible="false"
                         visible.pendingResponse="true"/>
    </s:HGroup>

    <s:DataGrid id="sourceRackGrid" width="100%" height="155" minHeight="160"
                dataProvider="{isoPlates}" editable="true">
        <s:columns>
            <s:ArrayList>
                <s:GridColumn width="155" dataField="prefix" editable="true"
                              headerText="Prefix" rendererIsEditable="true">
                    <s:itemRenderer>
                        <fx:Component>
                            <s:GridItemRenderer>
                                <fx:Script>
                                    <![CDATA[
                                        import mx.events.CollectionEvent;

                                        import spark.events.TextOperationEvent;

                                        protected function inputPrefix_changeHandler(event:TextOperationEvent):void
                                        {
                                            data.prefix = TextInput(event.target).text;
                                            outerDocument.isoPlates.dispatchEvent(new CollectionEvent(CollectionEvent.COLLECTION_CHANGE));
                                        }
                                    ]]>
                                </fx:Script>
                                <s:TextInput width="100%"
                                             change="inputPrefix_changeHandler(event)"
                                             horizontalCenter="0"
                                             text="@{data.prefix}"
                                             verticalCenter="0"/>
                            </s:GridItemRenderer>
                        </fx:Component>
                    </s:itemRenderer>
                </s:GridColumn>
                <s:GridColumn dataField="barcode" editable="false"
                              headerText="Source Barcode"/>
                <s:GridColumn dataField="label" editable="false"
                              headerText="Source Label"/>
                <s:GridColumn width="24">
                    <s:itemRenderer>
                        <fx:Component>
                            <s:GridItemRenderer>
                                <components1:ImageButton left="2" top="2"
                                                         width="22"
                                                         click="outerDocument.deleteSourceRack(event)"
                                                         source="@Embed('/assets/icons/delete.png')"
                                                         toolTip="delete"/>
                            </s:GridItemRenderer>
                        </fx:Component>
                    </s:itemRenderer>
                </s:GridColumn>
            </s:ArrayList>
        </s:columns>
    </s:DataGrid>
</s:VGroup>