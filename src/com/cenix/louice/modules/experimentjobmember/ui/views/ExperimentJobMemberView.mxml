<?xml version="1.0" encoding="utf-8"?>
<views1:MemberView xmlns:fx="http://ns.adobe.com/mxml/2009"
                 xmlns:s="library://ns.adobe.com/flex/spark"
                 xmlns:mx="library://ns.adobe.com/flex/mx"
                 xmlns:components="com.cenix.louice.shared.ui.components.*"
                 xmlns:views="com.cenix.louice.modules.devicemember.ui.views.*"
                 xmlns:view="org.everest.flex.ui.views.*"
                 xmlns:renderers="org.everest.flex.ui.renderers.*"
                 xmlns:renderer="com.cenix.louice.modules.experimentjobmember.ui.renderer.*"
                 width="100%" height="100%"
                 title="{model.title}"
                 editable="false"
                 xmlns:components1="org.everest.flex.ui.components.*"
                 xmlns:views1="org.everest.flex.ui.views.*"
                 creationComplete="creationCompleteHandler(event)">
    <fx:Script>
        <![CDATA[
            import com.cenix.louice.shared.model.vos.BarcodePrintJobMember;
            import com.cenix.louice.shared.model.vos.BarcodeType;
            import com.cenix.louice.shared.model.vos.ExperimentMember;
            import com.cenix.louice.shared.model.vos.ExperimentMetaDataTypes;
            import com.cenix.louice.shared.model.vos.ExperimentRackMember;
            import com.cenix.louice.shared.model.vos.ItemStatusMember;
            import com.cenix.louice.shared.model.vos.PlateMember;
            import com.cenix.louice.shared.ui.components.FileDownloadView;
            import com.cenix.louice.shared.ui.view.BarcodePrintPreView;
            
            import mx.events.FlexEvent;
            
            import org.everest.flex.events.MemberEvent;
            import org.everest.flex.model.Link;
            import org.everest.flex.model.MembersCollection;
            import org.everest.flex.ui.components.ConfirmationView;

            [Bindable]
            public var plateActionsEnabled:Boolean = true;

            protected function creationCompleteHandler(event:FlexEvent):void
            {
                model.addEventListener(MemberEvent.MEMBER_CHANGED, 
									   modelChangedHandler);
            }

            private function modelChangedHandler(event:Event):void
            {
                if ((model != null)&&(model.experiments != null))
                {
                    experimentList.dataProvider = model.experiments;

                    if (model.experiments.length > 0)
                    {
                        plateActions.visible = true;
                        if (model.experiments[0].experiment_metadata_type.id.toUpperCase() == ExperimentMetaDataTypes.MANUAL)
                        {
                            manualRadioBtn.selected = true;
                            manualRadioBtn.visible = false;
                            robotRadioBtn.visible = false;
                            getWorklistsBtn.visible = false;
                            updateDbBtn.visible = true;
                        }
                    }
                    else
                    {
                        plateActions.visible = false;
                    }
                    
                    for each (var experiment:ExperimentMember in model.experiments)
                    {
                        var eracks:MembersCollection = experiment.experiment_racks;
                        for each (var rack:ExperimentRackMember in eracks)
                        {
                            var plate:PlateMember = rack.plate;
                            var status:ItemStatusMember = plate.status;
                            //as soon as one experiment is done the global plate
                            //actions are disabled
                            if (status.title.toLowerCase() != 'future')
                            {
                                plateActionsEnabled = false;
                            }
                        }
                    }
                }
            }

            protected function downloadWorklist(event:MouseEvent):void
            {
                var eracks:MembersCollection = model.experiments[0].experiment_racks;
                if (eracks && (eracks.length > 0))
                {
                    var erack:ExperimentRackMember = ExperimentRackMember(eracks.getItemAt(0));
                    var url:String = erack.experiment.href + "worklists.zip?type=ALL_WITH_ROBOT";
                    FileDownloadView.show(url,  filename);
                }
            }

            private function get filename():String
            {
                var t:String = model.label;
                name = t.indexOf(':') > 0 ? t.substr(t.indexOf(':')) : t;
                name = name.replace(/ /g, '');

                return 'exp_job_' + name + '_all_experiments.zip';

            }

            protected function printBarcodes(event:Event):void
            {
                var barcode:BarcodePrintJobMember = new BarcodePrintJobMember();
                for each (var experiment:ExperimentMember in model.experiments)
                {
                    var eracks:MembersCollection = experiment.experiment_racks;
                    for each (var rack:ExperimentRackMember in eracks)
                    {
                        barcode.addBarcodeLabelPair(rack.plate.barcode, rack.plate.label);
                        barcode.type = BarcodeType.UNIRACK;
                    }
                }

                BarcodePrintPreView.show(this.parent.parent.parent, barcode);
            }

            protected function toggleCheckboxes(dataProvider:*, fieldName:String, select:Boolean=true):void
            {
                for each (var field:Object in dataProvider)
                {
                    if (field.hasOwnProperty(fieldName))
                    {
                        field[fieldName] = select;
                    }
                }
            }

            protected function updateDbBtn_clickHandler(event:MouseEvent):void
            {
                if ((manualRadioBtn.selected)||(robotRadioBtn.selected))
                {
                    var msg:String = 'Sample volumes for *all* ISO and cell plates will be adjusted';
                    if (model.experiments[0].experiment_metadata_type.id.toUpperCase() != ExperimentMetaDataTypes.MANUAL)
                    {
                        msg += ' and worklist download will be disabled.';
                    }
                    ConfirmationView.show(msg + '.\n\nAre you sure to proceed?', 
                                          'Update Database',
                        function():void{
                            for each (var experiment:ExperimentMember in model.experiments)
                            {
                                var eracks:MembersCollection = experiment.experiment_racks;
                                if (eracks && (eracks.length > 0))
                                {
                                    for each (var erack:ExperimentRackMember in eracks)
                                    {
                                        if (manualRadioBtn.selected)
                                        {
                                            erack.plate.status = new ItemStatusMember();
                                            erack.plate.status.link = new Link("manual_execution","http://localhost:6543/item-statuses/manual_execution/");
                                        } else if (robotRadioBtn.selected) {
                                            erack.plate.status = new ItemStatusMember();
                                            erack.plate.status.link = new Link("robot_execution","http://localhost:6543/item-statuses/robot_execution/");
                                        }
                                    }
                                }
                            }
                            submit(model);
                        });
                }
            }

        ]]>
    </fx:Script>
    <fx:Declarations>
        <s:RadioButtonGroup id="group1"/>
    </fx:Declarations>
    <view:content>
        <s:Form width="100%" >
            <s:layout>
                <s:HorizontalLayout />
            </s:layout>
            <s:Group>
                <s:layout>
                    <s:FormLayout/>
                </s:layout>
                <s:FormItem label="Label">
                    <s:Label text="{model.label}"/>
                </s:FormItem>
                <s:FormItem label="User">
                    <s:Label text="{model.user}"/>
                </s:FormItem>
            </s:Group>
            <s:Group>
                <s:layout>
                    <s:FormLayout/>
                </s:layout>
                <s:FormItem label="Subproject">
                    <s:Label text="{model.subproject.fullTitle}"/>
                </s:FormItem>
                <s:FormItem label="Type">
                    <s:Label text="{model.job_type}"/>
                </s:FormItem>
            </s:Group>
            <s:Group>
                <s:layout>
                    <s:FormLayout/>
                </s:layout>
                <s:FormItem label="Start-time">
                    <s:Label text="{model.start_time.toLocaleString()}"/>
                </s:FormItem>
                <s:FormItem label="Experiment Metadata">
                    <components1:MemberLinkButton link="{model.experimentMetadata}" />
                </s:FormItem>
            </s:Group>
            <s:Group>
                <s:layout>
                    <s:FormLayout/>
                </s:layout>
                <s:FormItem label="Total plates">
                    <s:Label text="{model.plateCount}"/>
                </s:FormItem>
            </s:Group>
        </s:Form>
    </view:content>
    <view:actionBarContent>
        <s:Button label="Print all barcodes"
                  click="printBarcodes(event)"
                  icon="@Embed(source='/assets/icons/barcode.png')"
                  height="18"/>
        <s:Spacer width="12" />
        <s:HGroup id="plateActions" 
				  enabled="{plateActionsEnabled}" 
                  mouseEnabled="{plateActionsEnabled}" 
				  verticalAlign="middle" 
				  visible="false">
            <s:Label text="Execution for All Experiments :" 
					 fontWeight="bold"  />
            <s:RadioButton id="manualRadioBtn" 
						   label="Manual" 
						   groupName="group1" />
            <s:RadioButton id="robotRadioBtn" 
						   label="Robot" 
						   groupName="group1" />
            <s:Button id="getWorklistsBtn"
                      label="Get worklists"
                      click="downloadWorklist(event)"
                      icon="@Embed(source='/assets/icons/download.png')"
                      height="18" 
					  enabled="{group1.selection != null &amp;&amp; !manualRadioBtn.selected}"/>
            <s:Button label="Update database" 
					  id="updateDbBtn"  
					  height="18" 
					  enabled="{group1.selection != null}"
                      click="updateDbBtn_clickHandler(event)"/>
        </s:HGroup>

    </view:actionBarContent>
    <view:additionalContent>
        <s:Scroller width="100%" height="100%">
            <s:DataGroup id="experimentList" width="100%">
                <s:layout>
                    <s:VerticalLayout gap="3" useVirtualLayout="true" />
                </s:layout>
                <s:itemRenderer>
                    <fx:Component>
                        <renderer:ExperimentListItemRenderer />
                    </fx:Component>
                </s:itemRenderer>
            </s:DataGroup>
        </s:Scroller>
    </view:additionalContent>
</views1:MemberView>