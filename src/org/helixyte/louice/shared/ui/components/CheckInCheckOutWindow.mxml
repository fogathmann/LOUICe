<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:maps="org.everest.flex.maps.*"
			   xmlns:validators="org.helixyte.louice.shared.ui.components.validators.*"
			   xmlns:validators1="org.everest.flex.ui.validators.*"
			   width="400" height="600" close="close()"
			   creationComplete="creationCompleteHandler(event)" title="Rack Check-In / Check-Out">
	<fx:Metadata>
		[Event(name="change", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import org.helixyte.louice.shared.model.vos.LocationMember;
			import org.helixyte.louice.shared.model.vos.TubeRackMember;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.core.IFlexDisplayObject;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			
			import org.everest.flex.events.MemberEvent;
			import org.everest.flex.events.SuggestionEvent;
			import org.everest.flex.model.Link;
			import org.everest.flex.ui.components.ErrorView;
			import org.everest.flex.ui.presenters.CollectionPresentationModel;
			import org.everest.flex.ui.presenters.FeedPresentationModel;
			
			private var _locationMap:Dictionary = new Dictionary();
			private var _editState:String;
			private var _alertIsShown:Boolean = false;
			
			[Bindable]
			private var _model:FeedPresentationModel;
			
			[Bindable]
			private var _tubeRacks:ArrayList = new ArrayList();

			[Embed('assets/ding.mp3')]
			private var _alertSoundClass:Class;		
			
			public function get tubeRacks():ArrayList
			{
				return _tubeRacks;
			}
			
			public function set model(value:FeedPresentationModel):void
			{
				_model = value;
				BindingUtils.bindProperty(this, "loadedLocations", value, "members");
			}
			
			public function set loadedLocations(items:*):void
			{
				if (currentState != "pendingResponse")
				{
					return;
				}
				if (ArrayCollection(items).length == 0)
				{
					_alertUser('The location barcode you scanned was not found!\n\n(Perhaps you scanned a rack barcode!?)')
				} else {
					var item:Object = items[0];
					if (! item.empty)
					{
						_alertUser('The location you scanned is not empty!');
					} else {
						// Cache location.
						var locMb:LocationMember = new LocationMember();
						locMb.title = item.title;
						locMb.selfLink = item.selfLink;
						locMb.link = new Link(item.label, item.selfLink);
						_locationMap[item.barcode] = locMb;
						inputRackBarcode.setFocus();
					}					
				}
				setCurrentState(_editState);
			}
			
			public function close():void
			{
				PopUpManager.removePopUp(this);
			}
			
			public function addTubeRack(event:MemberEvent):void
			{
				// Add item to grid.
				_tubeRacks.addItemAt(event.member, 0);				
			}
			
			public static function show(parent:DisplayObject, parentModel:CollectionPresentationModel):IFlexDisplayObject
			{
				var p:IFlexDisplayObject = PopUpManager.createPopUp(parent, CheckInCheckOutWindow, true);
				PopUpManager.centerPopUp(p);
				parentModel.addEventListener(MemberEvent.MEMBER_CHANGED, CheckInCheckOutWindow(p).addTubeRack);
				return p;
			}
			
			private function creationCompleteHandler(event:FlexEvent):void
			{
				inputLocationBarcode.setFocus();
				setCurrentState("checkin");
				_editState = "checkin";
			}
			
			private function onEnterLocationBarcode(event:Event):void
			{
				trace("location bc:" + event.target.text);
				dynBcValidator.listener = event.target;
				if (dynBcValidator.validate(event.target.text).type == ValidationResultEvent.VALID)
				{
					var locBc:String = inputLocationBarcode.text;
					if (_locationMap[locBc] == null)
					{
						// Locad location asynchronously.
						var sEv:SuggestionEvent = new SuggestionEvent(SuggestionEvent.LOAD_DATA);
						sEv.url = FlexGlobals.topLevelApplication.appUrl + '/locations/?q=barcode:equal-to:"' + locBc + '"';
						this.dispatchEvent(sEv);
						setCurrentState("pendingResponse");							
					}
				}
				dynBcValidator.listener = null;
			}
			
			private function onEnterRackBarcode(event:Event):void
			{
				trace("rack bc:" + event.target.text);
				dynBcValidator.listener = event.target;
				if (dynBcValidator.validate(event.target.text).type == ValidationResultEvent.VALID)
				{
					// Create new item.
					var rackBc:String = inputRackBarcode.text;
					var rackMb:TubeRackMember = new TubeRackMember();
					var locMb:LocationMember = null;
					rackMb.barcode = rackBc;
					rackMb.selfLink = FlexGlobals.topLevelApplication.appUrl 
						              + '/racks/' 
									  + rackBc 
									  + '/?refs=containers:INLINE~containers.sample:INLINE';
					if (_editState == 'checkin')
					{
						locMb = _locationMap[inputLocationBarcode.text];
						locMb.link = new Link(locMb.title, locMb.selfLink);
						rackMb.location = locMb;
						var mbUpdateEv:MemberEvent = new MemberEvent(MemberEvent.EDIT_MEMBER_IN_BACKGROUND);
						mbUpdateEv.editMode = MemberEvent.EDIT_MODE_UPDATE;
						mbUpdateEv.member = rackMb;
						this.parent.dispatchEvent(mbUpdateEv);
					} else {
						var mbDeleteEv:MemberEvent = new MemberEvent(MemberEvent.DELETE_MEMBER_IN_BACKGROUND)
						locMb = new LocationMember();
						locMb.selfLink = FlexGlobals.topLevelApplication.appUrl 
							             + '/racks/' 
										 + rackBc 
										 + '/location?refs=containers:OFF';
						mbDeleteEv.member = locMb;
						this.parent.dispatchEvent(mbDeleteEv);						
					}
					// Prepare for next scan.
					_reset();
				}
				dynBcValidator.listener = null;
			}
			
			private function onCheckOutToggle(event:Event):void
			{
				setCurrentState("checkout");
				_editState = "checkout";
				_tubeRacks.removeAll();
				if (event.target.selected)
				{
					btnCheckIn.selected = false;
				} else {
					btnCheckIn.selected = true;
				}
				rackBcValidator.required = false;
				_reset();
			}
			
			private function onCheckInToggle(event:Event):void
			{
				setCurrentState("checkin");
				_editState = "checkin";
				_tubeRacks.removeAll();
				if (event.target.selected)
				{
					btnCheckOut.selected = false;
				} else {
					btnCheckOut.selected = true;
				}			
				rackBcValidator.required = true;
				_reset();
			}
			
			private function _reset():void
			{
				inputLocationBarcode.text = '';
				inputLocationBarcode.errorString = '';
				inputRackBarcode.text = '';
				inputRackBarcode.errorString = '';
				if (_editState == 'checkin')
				{
					inputLocationBarcode.setFocus();		
				} else {
					inputRackBarcode.setFocus();
				}
				
			}
			
			private function _alertUser(message:String):void
			{
				if (! _alertIsShown)
				{
					_alertIsShown = true;
					var ding:Sound = new _alertSoundClass() as Sound; 
					ding.play(); 				
					var popup:ErrorView = ErrorView.show(message);
					popup.addEventListener(Event.REMOVED_FROM_STAGE, function(evt:Event):void{_alertIsShown=false;_reset()});					
				}
			}	
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<fx:Array id="validators">
			<validators:RackBarcodeValidator id="rackBcValidator" property="text" required="true"
											 source="{inputRackBarcode}"/>
			<validators:RackBarcodeValidator id="locBcValidator" property="text" required="true"
											 source="{inputLocationBarcode}"/>
			<validators:RackBarcodeValidator id="dynBcValidator" triggerEvent=""/>
		</fx:Array>

		<validators1:FormValidator id="formValidator" validators="{validators}"/>

		<maps:SuggestionEventMap dispatcher="{this}" presenter="{FeedPresentationModel}"
								 view="{CheckInCheckOutWindow}"/>

	</fx:Declarations>
	
	<s:states>
		<s:State name="checkin"/>
		<s:State name="checkout"/>
		<s:State name="pendingResponse"/>
	</s:states>

	<s:Form width="100%" height="100%">
		<s:HGroup width="100%" horizontalAlign="center"
				  enabled.pendingResponse="false">
			<s:ToggleButton id="btnCheckIn" width="100" height="50" label="Check In"
							click="onCheckInToggle(event)" selected="true"/>
			<s:ToggleButton id="btnCheckOut" width="100" height="50" label="Check Out"
							click="onCheckOutToggle(event)"/>
		</s:HGroup>			
		<s:VGroup width="100%" height="100%" horizontalAlign="center"
				  enabled.pendingResponse="false">
			<s:VGroup width="100%" horizontalAlign="right">
				<s:FormItem excludeFrom="checkout" width="100%" label="Location barcode:">
					<s:TextInput id="inputLocationBarcode" change="onEnterLocationBarcode(event)"/>				
				</s:FormItem>					
				<s:FormItem width="100%" label="Rack barcode:">
					<s:TextInput id="inputRackBarcode" change="onEnterRackBarcode(event)"/>				
				</s:FormItem>
			</s:VGroup>
			<s:DataGrid id="tubeRackGrid" width="100%" height="100%" dataProvider="{tubeRacks}">
				<s:columns>
					<s:ArrayList>
						<s:GridColumn dataField="barcode" editable="false"
									  headerText="Tube Rack Barcode"/>
						<s:GridColumn excludeFrom="checkout" dataField="location.title"
									  editable="false" headerText="Location"/>
					</s:ArrayList>							
				</s:columns>
			</s:DataGrid>
		</s:VGroup>
		<s:HGroup width="100%" horizontalAlign="center">
			<s:Button id="closeBtn" label="Close" click="{close()}"/>				
		</s:HGroup>
	</s:Form>
	
</s:TitleWindow>
